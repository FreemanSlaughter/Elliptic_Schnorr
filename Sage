# Params
p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
r = 115792089237316195423570985008687907852837564279074904382605163141518161494337
Fp = GF(p)
Fr = GF(r)
A = 0
B = 7
E = EllipticCurve(Fp, [A, B])
assert(E.cardinality() == r)


# Select random generator G
G = E.random_point()

   
# Generate secret key sk
sk = Integer(Fp.random_element())

# Generate pubkey pk
pk = sk*G

# Message to be signed
m = 55



# Sign the message m
def schnorr_sign(sk, G, m, pk, p):
    # Choose a random number r
    r = Integer(Fp.random_element())

    # Calculate commitment R 
    R = r*G
    
    # Hash 
    H = hash(str(hash(R)) + str(m)) % p
    
    # Calculate the sig s
    s = (r - H*sk) 
    
    return R, s, H


# Verify a sig
def schnorr_verify(R, s, G, m, pk, p, H):
    
    # Calculate L and R sides to compare
    left_side = (s*G + H*pk) 
    right_side = R
    
    return left_side == right_side



# Sign 
R, s, H = schnorr_sign(sk, G, m, pk, p)
print(f"Signature: R = {R}, s = {s}") 



# Verify (with timing)
# Start stopwatch
start_time = cputime()

is_valid = schnorr_verify(R, s, G, m, pk, p, H)

# End stopwatch
end_time = cputime()

# Print timing result
print(f"CPU time: {end_time - start_time}")

print(f"Is valid? {is_valid}")















